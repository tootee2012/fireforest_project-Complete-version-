import 'dart:convert';
import 'package:fireforest_project/screens/home.dart';
import 'package:fireforest_project/screens/register.dart';
import 'package:fireforest_project/screens/admin_home.dart'; // ‡πÄ‡∏û‡∏¥‡πà‡∏° import ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö admin home
import 'package:fireforest_project/service.dart';
import 'package:flutter/material.dart';
import 'package:fireforest_project/boxs/userlog.dart';

class Login extends StatefulWidget {
  const Login({super.key});

  @override
  State<Login> createState() => _LoginState();
}

class _LoginState extends State<Login> {
  final GlobalKey<FormState> _formKey = GlobalKey<FormState>();
  TextEditingController emailController = TextEditingController();
  TextEditingController passwordController = TextEditingController();
  Service service = Service();

  bool _obscurePassword = true; // üëÅÔ∏è toggle password
  bool _isButtonEnabled = false; // ‚úÖ enable/disable login button

  @override
  void initState() {
    super.initState();
    // ‡∏ü‡∏±‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡∏≠‡∏á TextField ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏∏‡πà‡∏°
    emailController.addListener(_updateButtonState);
    passwordController.addListener(_updateButtonState);
  }

  void _updateButtonState() {
    setState(() {
      _isButtonEnabled =
          emailController.text.isNotEmpty && passwordController.text.isNotEmpty;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            // ‚úÖ ‡πÑ‡∏•‡πà‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß ‚Üí ‡∏™‡πâ‡∏°‡∏≠‡πà‡∏≠‡∏ô ‚Üí ‡∏™‡πâ‡∏°‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
            colors: [
              Color(0xFFFFFFFF), // ‡∏Ç‡∏≤‡∏ß‡∏ö‡∏£‡∏¥‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡πå
              Color(0xFFFFF8F0), // ‡∏Ç‡∏≤‡∏ß‡∏Ñ‡∏£‡∏µ‡∏°
              Color(0xFFFFE4B5), // ‡∏™‡πâ‡∏°‡∏≠‡πà‡∏≠‡∏ô‡∏°‡∏≤‡∏Å
              Color(0xFFFFD4A3), // ‡∏™‡πâ‡∏°‡∏≠‡πà‡∏≠‡∏ô
              Color(0xFFFFCC91), // ‡∏™‡πâ‡∏°‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
            ],
            stops: [0.0, 0.2, 0.5, 0.8, 1.0],
          ),
        ),
        child: Center(
          child: SingleChildScrollView(
            padding: const EdgeInsets.symmetric(horizontal: 24),
            child: Form(
              key: _formKey,
              child: Column(
                children: [
                  // Logo - ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏µ
                  Container(
                    padding: const EdgeInsets.all(20),
                    decoration: BoxDecoration(
                      shape: BoxShape.circle,
                      gradient: RadialGradient(
                        center: Alignment.topLeft,
                        radius: 1.0,
                        colors: [
                          Colors.white,
                          Colors.orange[50]!,
                          Colors.orange[100]!,
                        ],
                        stops: const [0.0, 0.6, 1.0],
                      ),
                      boxShadow: [
                        BoxShadow(
                          color: Colors.orange.withOpacity(0.4),
                          spreadRadius: 3,
                          blurRadius: 15,
                          offset: const Offset(0, 5),
                        ),
                        BoxShadow(
                          color: Colors.white.withOpacity(0.8),
                          spreadRadius: 1,
                          blurRadius: 5,
                          offset: const Offset(-2, -2),
                        ),
                      ],
                    ),
                    child: Icon(
                      Icons.local_fire_department_rounded,
                      size: 50,
                      color: Colors.orange[800],
                    ),
                  ),
                  const SizedBox(height: 20),
                  const Text(
                    '‡πÅ‡∏≠‡∏õ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡πÑ‡∏ü‡∏õ‡πà‡∏≤',
                    style: TextStyle(
                      fontSize: 24,
                      fontWeight: FontWeight.bold,
                      color: Color(0xFFFF5722), // ‚úÖ ‡∏™‡πâ‡∏°‡πÅ‡∏î‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°
                      shadows: [
                        Shadow(
                          offset: Offset(1, 1),
                          blurRadius: 3,
                          color: Colors.black26,
                        ),
                      ],
                    ),
                  ),
                  const SizedBox(height: 8),
                  Text(
                    '‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á‡πÑ‡∏ü‡∏õ‡πà‡∏≤',
                    style: TextStyle(
                      fontSize: 14,
                      color: Colors.orange[800],
                      fontStyle: FontStyle.italic,
                    ),
                  ),
                  const SizedBox(height: 40),

                  // Email field
                  TextFormField(
                    controller: emailController,
                    validator: (value) {
                      if (value == null || value.isEmpty) {
                        return '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•';
                      }
                      return null;
                    },
                    decoration: InputDecoration(
                      prefixIcon: Icon(Icons.email, color: Colors.orange[700]),
                      hintText: "email@domain.com",
                      hintStyle: TextStyle(color: Colors.grey[500]),
                      labelText: "‡∏≠‡∏µ‡πÄ‡∏°‡∏•",
                      labelStyle: TextStyle(color: Colors.orange[800]),
                      filled: true,
                      fillColor: Colors.white.withOpacity(0.95),
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(15),
                        borderSide: BorderSide(color: Colors.orange[300]!),
                      ),
                      enabledBorder: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(15),
                        borderSide: BorderSide(
                          color: Colors.orange[200]!,
                          width: 1.5,
                        ),
                      ),
                      focusedBorder: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(15),
                        borderSide: BorderSide(
                          color: Colors.orange[700]!,
                          width: 2.5,
                        ),
                      ),
                    ),
                  ),
                  const SizedBox(height: 16),

                  // Password field with eye icon
                  TextFormField(
                    controller: passwordController,
                    obscureText: _obscurePassword,
                    validator: (value) {
                      if (value == null || value.isEmpty) {
                        return '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô';
                      }
                      return null;
                    },
                    decoration: InputDecoration(
                      prefixIcon: Icon(Icons.lock, color: Colors.orange[700]),
                      suffixIcon: IconButton(
                        icon: Icon(
                          _obscurePassword
                              ? Icons.visibility_off
                              : Icons.visibility,
                          color: Colors.orange[700],
                        ),
                        onPressed: () {
                          setState(() {
                            _obscurePassword = !_obscurePassword;
                          });
                        },
                      ),
                      hintText: "‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢",
                      hintStyle: TextStyle(color: Colors.grey[500]),
                      labelText: "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô",
                      labelStyle: TextStyle(color: Colors.orange[800]),
                      filled: true,
                      fillColor: Colors.white.withOpacity(0.95),
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(15),
                        borderSide: BorderSide(color: Colors.orange[300]!),
                      ),
                      enabledBorder: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(15),
                        borderSide: BorderSide(
                          color: Colors.orange[200]!,
                          width: 1.5,
                        ),
                      ),
                      focusedBorder: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(15),
                        borderSide: BorderSide(
                          color: Colors.orange[700]!,
                          width: 2.5,
                        ),
                      ),
                    ),
                  ),
                  const SizedBox(height: 24),

                  // Login button - ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πâ‡∏°‡πÄ‡∏Ç‡πâ‡∏°
                  SizedBox(
                    width: double.infinity,
                    child: ElevatedButton(
                      onPressed:
                          _isButtonEnabled
                              ? () async {
                                if (_formKey.currentState!.validate()) {
                                  try {
                                    // 1. ‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ User ‡∏Å‡πà‡∏≠‡∏ô
                                    var userRes = await service.loginUser(
                                      emailController.text,
                                      passwordController.text,
                                    );
                                    var email = emailController.text;

                                    if (userRes.statusCode == 200) {
                                      // ‚úÖ Login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏î‡πâ‡∏ß‡∏¢‡∏ö‡∏±‡∏ç‡∏ä‡∏µ User
                                      try {
                                        var jsonRes = jsonDecode(userRes.body);
                                        print("User Login Success: $jsonRes");

                                        UserLog().username =
                                            emailController.text;

                                        Navigator.pushReplacement(
                                          context,
                                          MaterialPageRoute(
                                            builder:
                                                (context) => HomePage(
                                                  userEmail: "$email",
                                                ),
                                          ),
                                        );
                                        return; // ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
                                      } catch (e) {
                                        print("User JSON Parse Error: $e");
                                        print("Response Body: ${userRes.body}");
                                        // ‡∏ñ‡∏∂‡∏á‡πÅ‡∏°‡πâ JSON ‡∏ú‡∏¥‡∏î ‡πÅ‡∏ï‡πà status 200 ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤ login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                                        UserLog().username =
                                            emailController.text;
                                        Navigator.pushReplacement(
                                          context,
                                          MaterialPageRoute(
                                            builder:
                                                (context) => HomePage(
                                                  userEmail: "$email",
                                                ),
                                          ),
                                        );
                                        return;
                                      }
                                    }

                                    // 2. ‡∏´‡∏≤‡∏Å User ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ Admin
                                    var adminRes = await service.loginAgency(
                                      emailController.text,
                                      passwordController.text,
                                    );

                                    if (adminRes.statusCode == 200) {
                                      // ‚úÖ Login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏î‡πâ‡∏ß‡∏¢‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Admin
                                      try {
                                        var jsonRes = jsonDecode(adminRes.body);
                                        print("Admin Login Success: $jsonRes");

                                        UserLog().username =
                                            emailController.text;

                                        Navigator.pushReplacement(
                                          context,
                                          MaterialPageRoute(
                                            builder:
                                                (context) => Adminhome(
                                                  agencyEmail: "$email",
                                                ),
                                          ),
                                        );
                                      } catch (e) {
                                        print("Admin JSON Parse Error: $e");
                                        print(
                                          "Response Body Length: ${adminRes.body.length}",
                                        );
                                        print(
                                          "Response Body Preview: ${adminRes.body.substring(0, 500)}...",
                                        );

                                        // ‡∏ñ‡∏∂‡∏á‡πÅ‡∏°‡πâ JSON ‡∏ú‡∏¥‡∏î ‡πÅ‡∏ï‡πà status 200 ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤ login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                                        UserLog().username =
                                            emailController.text;
                                        Navigator.pushReplacement(
                                          context,
                                          MaterialPageRoute(
                                            builder:
                                                (context) => Adminhome(
                                                  agencyEmail: "$email",
                                                ),
                                          ),
                                        );
                                      }
                                    } else {
                                      // ‚ùå ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
                                      ScaffoldMessenger.of(
                                        context,
                                      ).showSnackBar(
                                        const SnackBar(
                                          content: Text(
                                            "‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
                                          ),
                                          backgroundColor: Colors.red,
                                        ),
                                      );
                                    }
                                  } catch (e) {
                                    // ‚ùå ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
                                    print("Login Error: $e");
                                    ScaffoldMessenger.of(context).showSnackBar(
                                      const SnackBar(
                                        content: Text(
                                          "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
                                        ),
                                        backgroundColor: Colors.red,
                                      ),
                                    );
                                  }
                                }
                              }
                              : null, // ‚ùå disable ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö
                      style: ElevatedButton.styleFrom(
                        // ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ gradient
                        backgroundColor: Colors.transparent,
                        shadowColor: Colors.transparent,
                        disabledBackgroundColor: Colors.grey[300],
                        padding: const EdgeInsets.symmetric(vertical: 16),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(15),
                        ),
                        elevation: 0,
                      ).copyWith(
                        backgroundColor:
                            MaterialStateProperty.resolveWith<Color>((
                              Set<MaterialState> states,
                            ) {
                              if (states.contains(MaterialState.disabled)) {
                                return Colors.grey[300]!;
                              }
                              return Colors.transparent;
                            }),
                      ),
                      child: Container(
                        decoration:
                            _isButtonEnabled
                                ? BoxDecoration(
                                  gradient: LinearGradient(
                                    colors: [
                                      Color(0xFFFF9800), // ‡∏™‡πâ‡∏°‡∏Å‡∏•‡∏≤‡∏á
                                      Color(0xFFFF7043), // ‡∏™‡πâ‡∏°‡πÅ‡∏ã‡πà‡∏°‡∏≠‡∏ô
                                      Color(0xFFFF5722), // ‡∏™‡πâ‡∏°‡πÅ‡∏î‡∏á
                                    ],
                                    begin: Alignment.topLeft,
                                    end: Alignment.bottomRight,
                                    stops: [0.0, 0.5, 1.0],
                                  ),
                                  borderRadius: BorderRadius.circular(15),
                                  boxShadow: [
                                    BoxShadow(
                                      color: Color(0xFFFF9800).withOpacity(0.4),
                                      spreadRadius: 1,
                                      blurRadius: 8,
                                      offset: Offset(0, 4),
                                    ),
                                  ],
                                )
                                : BoxDecoration(
                                  color: Colors.grey[300],
                                  borderRadius: BorderRadius.circular(15),
                                ),
                        padding: const EdgeInsets.symmetric(vertical: 16),
                        child: const Center(
                          child: Text(
                            '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö',
                            style: TextStyle(
                              fontSize: 18,
                              color: Colors.white,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                  const SizedBox(height: 16),

                  // Forgot password
                  TextButton(
                    onPressed: () {},
                    child: Text(
                      "‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ",
                      style: TextStyle(color: Colors.orange[800]),
                    ),
                  ),

                  const SizedBox(height: 8),

                  // Register button - ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏Ç‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πâ‡∏°‡∏≠‡πà‡∏≠‡∏ô
                  SizedBox(
                    width: double.infinity,
                    child: OutlinedButton(
                      onPressed: () {
                        Navigator.push(
                          context,
                          MaterialPageRoute(
                            builder: (context) => const RegisterScreen(),
                          ),
                        );
                      },
                      style: OutlinedButton.styleFrom(
                        // ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏ß‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô
                        side: BorderSide(
                          color: Colors.orange[600]!,
                          width: 2.5,
                        ),
                        backgroundColor: Colors.white.withOpacity(0.2),
                        padding: const EdgeInsets.symmetric(vertical: 14),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(15),
                        ),
                      ),
                      child: Container(
                        decoration: BoxDecoration(
                          gradient: LinearGradient(
                            colors: [
                              Colors.white.withOpacity(0.1),
                              Colors.orange[50]!.withOpacity(0.3),
                            ],
                            begin: Alignment.topLeft,
                            end: Alignment.bottomRight,
                          ),
                          borderRadius: BorderRadius.circular(13),
                        ),
                        padding: const EdgeInsets.symmetric(vertical: 2),
                        child: Text(
                          '‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å',
                          textAlign: TextAlign.center,
                          style: TextStyle(
                            color: Colors.orange[900],
                            fontSize: 16,
                            fontWeight: FontWeight.w600,
                          ),
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }
}
