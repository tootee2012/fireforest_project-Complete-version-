import 'package:fireforest_project/screens/home.dart';
import 'package:fireforest_project/service.dart';
import 'package:fireforest_project/model/volunteer_model.dart'; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° import
import 'package:flutter/material.dart';
import 'package:fireforest_project/theme/app_theme.dart';

class ApplyForm extends StatefulWidget {
  final String userEmail;
  final int recruitId;
  const ApplyForm({
    super.key,
    required this.userEmail,
    required this.recruitId,
  });

  @override
  State<ApplyForm> createState() => _ApplyFormState();
}

class _ApplyFormState extends State<ApplyForm> with TickerProviderStateMixin {
  final _formKey = GlobalKey<FormState>();

  TextEditingController weightController = TextEditingController();
  TextEditingController heightController = TextEditingController();
  TextEditingController allergiesController = TextEditingController();
  TextEditingController diseasesController = TextEditingController();
  TextEditingController specialSkillsController = TextEditingController();
  String hasTraining = '‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢';
  final List<String> trainingOptions = ['‡πÄ‡∏Ñ‡∏¢', '‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢'];

  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Animation Controller ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô home
  late AnimationController _animationController;
  late Animation<double> _fadeAnimation;

  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°
  bool isLoadingExistingData = true;
  VolunteerModel? existingVolunteer;
  String? dataSourceMessage;

  @override
  void initState() {
    super.initState();

    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Animation Setup
    _animationController = AnimationController(
      duration: const Duration(milliseconds: 800),
      vsync: this,
    );
    _fadeAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(parent: _animationController, curve: Curves.easeInOut),
    );

    // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    _loadExistingVolunteerData();

    _animationController.forward();
  }

  @override
  void dispose() {
    weightController.dispose();
    heightController.dispose();
    allergiesController.dispose();
    diseasesController.dispose();
    specialSkillsController.dispose();
    _animationController.dispose();
    super.dispose();
  }

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏≠‡∏≤‡∏™‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£
  Future<void> _loadExistingVolunteerData() async {
    try {
      print('üîç Loading existing volunteer data for: ${widget.userEmail}');

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏™‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
      final volunteer = await Service().getVolunteerByEmail(widget.userEmail);

      if (volunteer != null) {
        print('‚úÖ Found existing volunteer data');
        print('   Status: ${volunteer.volunteerStatus}');
        print('   Weight: ${volunteer.weight}');
        print('   Height: ${volunteer.height}');
        print('   Talent: ${volunteer.talent}');
        print('   Training: ${volunteer.isTraining}');

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ - ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏±‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°
        if (volunteer.volunteerStatus == '‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏±‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å' ||
            volunteer.volunteerStatus == '‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö') {
          setState(() {
            existingVolunteer = volunteer;

            // ‚úÖ ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡∏•‡∏á‡πÉ‡∏ô form
            weightController.text = volunteer.weight.toString();
            heightController.text = volunteer.height.toString();
            specialSkillsController.text = volunteer.talent ?? '';
            hasTraining = volunteer.isTraining ? '‡πÄ‡∏Ñ‡∏¢' : '‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢';

            // ‚úÖ ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å applyForm ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            if (volunteer.applyForm != null) {
              String allergicFood = volunteer.applyForm!.allergicFood ?? '';
              String congenitalDiseases =
                  volunteer.applyForm!.congenitalDiseases ?? '';

              // ‡πÅ‡∏õ‡∏•‡∏á "none" ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
              allergiesController.text =
                  (allergicFood.toLowerCase() == 'none') ? '' : allergicFood;
              diseasesController.text =
                  (congenitalDiseases.toLowerCase() == 'none')
                      ? ''
                      : congenitalDiseases;
            }

            // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            if (volunteer.volunteerStatus == '‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏±‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å') {
              dataSourceMessage =
                  '‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß (‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏±‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)';
            } else {
              dataSourceMessage =
                  '‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß (‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö)';
            }

            isLoadingExistingData = false;
          });

          print('‚úÖ Pre-filled form with existing data');
        } else {
          // ‡∏ñ‡πâ‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏±‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
          setState(() {
            dataSourceMessage =
                '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏±‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ';
            isLoadingExistingData = false;
          });
          print('‚ÑπÔ∏è User already passed selection');
        }
      } else {
        // ‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô
        setState(() {
          dataSourceMessage = '‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å';
          isLoadingExistingData = false;
        });
        print('‚ÑπÔ∏è No existing volunteer data found - first time application');
      }
    } catch (e) {
      print('‚ùå Error loading existing volunteer data: $e');
      setState(() {
        dataSourceMessage = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà';
        isLoadingExistingData = false;
      });
    }
  }

  void _submitForm() {
    if (_formKey.currentState!.validate()) {
      // ‚úÖ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á check null ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏µ default value ‡πÅ‡∏•‡πâ‡∏ß

      // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: const Text(
            "‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢",
            style: TextStyle(
              fontFamily: 'Sarabun',
              fontWeight: FontWeight.w500,
            ),
          ),
          backgroundColor: AppTheme.primaryColor,
          behavior: SnackBarBehavior.floating,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(10),
          ),
        ),
      );

      // TODO: ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ API
      print('=== ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á ===');
      print('User Email: ${widget.userEmail}');
      print('Recruit ID: ${widget.recruitId}');
      print('Weight: ${weightController.text}');
      print('Height: ${heightController.text}');
      print('Allergies: ${allergiesController.text}');
      print('Diseases: ${diseasesController.text}');
      print('Special Skills: ${specialSkillsController.text}');
      print('Has Training: $hasTraining');

      bool train = hasTraining == "‡πÄ‡∏Ñ‡∏¢";
      double weight = double.parse(weightController.text);
      double height = double.parse(heightController.text);

      String allergies =
          allergiesController.text.isEmpty ? "none" : allergiesController.text;
      String diseases =
          diseasesController.text.isEmpty ? "none" : diseasesController.text;

      print('Final Allergies: $allergies');
      print('Final Diseases: $diseases');
      print('Final Training: $train');

      Service().saveApplyFormWithVolunteer(
        diseases,
        allergies,
        widget.recruitId,
        widget.userEmail,
        weight,
        height,
        specialSkillsController.text,
        train,
      );

      Navigator.pushReplacement(
        context,
        MaterialPageRoute(
          builder: (context) => HomePage(userEmail: widget.userEmail),
        ),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppTheme.backgroundColor,
      appBar: AppBar(
        backgroundColor: AppTheme.primaryColor,
        elevation: 0,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back_ios_rounded, color: Colors.white),
          onPressed: () => Navigator.pop(context),
        ),
        title: Text(
          existingVolunteer != null ? '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£' : '‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏≠‡∏≤‡∏™‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£',
          style: const TextStyle(
            fontFamily: 'Kanit',
            color: Colors.white,
            fontSize: 20,
            fontWeight: FontWeight.w600,
            letterSpacing: 0.5,
          ),
        ),
        centerTitle: true,
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16.0),
        child: FadeTransition(
          opacity: _fadeAnimation,
          child: Column(
            children: [
              // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Welcome Header Card
              _buildWelcomeCard(),

              const SizedBox(height: 16),

              // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Status Card
              if (dataSourceMessage != null) _buildStatusCard(),

              const SizedBox(height: 24),

              // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á Loading ‡∏´‡∏£‡∏∑‡∏≠ Form
              if (isLoadingExistingData)
                _buildLoadingCard()
              else
                _buildFormContainer(),
            ],
          ),
        ),
      ),
    );
  }

  // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Welcome Card
  Widget _buildWelcomeCard() {
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(24),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: Colors.grey.withOpacity(0.1),
            spreadRadius: 2,
            blurRadius: 8,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Row(
        children: [
          Container(
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              gradient: LinearGradient(
                colors:
                    existingVolunteer != null
                        ? [const Color(0xFFFF9800), const Color(0xFFFFC107)]
                        : [AppTheme.primaryColor, AppTheme.primaryLight],
              ),
              borderRadius: BorderRadius.circular(16),
            ),
            child: Icon(
              existingVolunteer != null
                  ? Icons.edit_rounded
                  : Icons.assignment_ind_rounded,
              color: Colors.white,
              size: 28,
            ),
          ),
          const SizedBox(width: 16),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  existingVolunteer != null ? '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' : '‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
                  style: const TextStyle(
                    fontFamily: 'Sarabun',
                    fontSize: 16,
                    color: Color(0xFF757575),
                    fontWeight: FontWeight.w400,
                  ),
                ),
                Text(
                  existingVolunteer != null
                      ? '‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏≠‡∏≤‡∏™‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£'
                      : '‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏≠‡∏≤‡∏™‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£',
                  style: const TextStyle(
                    fontFamily: 'Kanit',
                    fontSize: 22,
                    fontWeight: FontWeight.w700,
                    color: AppTheme.primaryColor,
                    letterSpacing: 0.3,
                  ),
                ),
                const SizedBox(height: 4),
                Text(
                  existingVolunteer != null
                      ? '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡πÉ‡∏´‡∏°‡πà'
                      : '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô',
                  style: const TextStyle(
                    fontFamily: 'Sarabun',
                    fontSize: 13,
                    color: Color(0xFF616161),
                    fontWeight: FontWeight.w500,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Status Card
  Widget _buildStatusCard() {
    Color cardColor;
    Color iconColor;
    IconData icon;

    if (dataSourceMessage!.contains('‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏±‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å')) {
      cardColor = Colors.orange.withOpacity(0.1);
      iconColor = Colors.orange;
      icon = Icons.refresh_rounded;
    } else if (dataSourceMessage!.contains('‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö')) {
      cardColor = Colors.blue.withOpacity(0.1);
      iconColor = Colors.blue;
      icon = Icons.pending_rounded;
    } else if (dataSourceMessage!.contains('‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏±‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å')) {
      cardColor = Colors.red.withOpacity(0.1);
      iconColor = Colors.red;
      icon = Icons.block_rounded;
    } else {
      cardColor = AppTheme.success.withOpacity(0.1);
      iconColor = AppTheme.success;
      icon = Icons.new_releases_rounded;
    }

    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: cardColor,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: iconColor.withOpacity(0.3)),
      ),
      child: Row(
        children: [
          Icon(icon, color: iconColor, size: 24),
          const SizedBox(width: 12),
          Expanded(
            child: Text(
              dataSourceMessage!,
              style: TextStyle(
                fontFamily: 'Sarabun',
                fontSize: 14,
                color: iconColor,
                fontWeight: FontWeight.w600,
              ),
            ),
          ),
        ],
      ),
    );
  }

  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Loading Card
  Widget _buildLoadingCard() {
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(32),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: Colors.grey.withOpacity(0.08),
            spreadRadius: 2,
            blurRadius: 12,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: const Column(
        children: [
          CircularProgressIndicator(color: AppTheme.primaryColor),
          SizedBox(height: 16),
          Text(
            '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°...',
            style: TextStyle(
              fontFamily: 'Sarabun',
              fontSize: 16,
              color: Color(0xFF666666),
              fontWeight: FontWeight.w500,
            ),
          ),
        ],
      ),
    );
  }

  // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Submit Button
  Widget _buildSubmitButton() {
    String buttonText =
        existingVolunteer != null ? '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£' : '‡∏™‡πà‡∏á‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£';

    IconData buttonIcon =
        existingVolunteer != null ? Icons.update_rounded : Icons.send_rounded;

    return Container(
      width: double.infinity,
      height: 56,
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors:
              existingVolunteer != null
                  ? [const Color(0xFFFF9800), const Color(0xFFFFC107)]
                  : [AppTheme.primaryColor, AppTheme.primaryLight],
        ),
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: (existingVolunteer != null
                    ? const Color(0xFFFF9800)
                    : AppTheme.primaryColor)
                .withOpacity(0.3),
            spreadRadius: 1,
            blurRadius: 8,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: ElevatedButton(
        onPressed: _submitForm,
        style: ElevatedButton.styleFrom(
          backgroundColor: Colors.transparent,
          shadowColor: Colors.transparent,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(16),
          ),
        ),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(buttonIcon, color: Colors.white, size: 24),
            const SizedBox(width: 12),
            Text(
              buttonText,
              style: const TextStyle(
                fontFamily: 'Kanit',
                fontSize: 18,
                fontWeight: FontWeight.w600,
                color: Colors.white,
                letterSpacing: 0.5,
              ),
            ),
          ],
        ),
      ),
    );
  }

  // ... (‡πÄ‡∏Å‡πá‡∏ö methods ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
  Widget _buildFormContainer() {
    return Container(
      width: double.infinity,
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: Colors.grey.withOpacity(0.08),
            spreadRadius: 2,
            blurRadius: 12,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Padding(
        padding: const EdgeInsets.all(24),
        child: Form(
          key: _formKey,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Header
              Row(
                children: [
                  Container(
                    padding: const EdgeInsets.all(8),
                    decoration: BoxDecoration(
                      color: AppTheme.primaryColor.withOpacity(0.1),
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: const Icon(
                      Icons.person_add_rounded,
                      color: AppTheme.primaryColor,
                      size: 24,
                    ),
                  ),
                  const SizedBox(width: 12),
                  const Text(
                    '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß',
                    style: TextStyle(
                      fontFamily: 'Kanit',
                      fontSize: 20,
                      fontWeight: FontWeight.w600,
                      color: AppTheme.primaryColor,
                      letterSpacing: 0.3,
                    ),
                  ),
                ],
              ),

              const SizedBox(height: 24),

              // ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å
              _buildTextField(
                controller: weightController,
                label: "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å (‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°)",
                hint: "‡∏£‡∏∞‡∏ö‡∏∏‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
                icon: Icons.monitor_weight_rounded,
                keyboardType: TextInputType.number,
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å";
                  }
                  final weight = double.tryParse(value);
                  if (weight == null || weight <= 0) {
                    return "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á";
                  }
                  return null;
                },
              ),

              const SizedBox(height: 20),

              // ‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á
              _buildTextField(
                controller: heightController,
                label: "‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á (‡πÄ‡∏ã‡∏ô‡∏ï‡∏¥‡πÄ‡∏°‡∏ï‡∏£)",
                hint: "‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
                icon: Icons.height_rounded,
                keyboardType: TextInputType.number,
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á";
                  }
                  final height = double.tryParse(value);
                  if (height == null || height <= 0) {
                    return "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á";
                  }
                  return null;
                },
              ),

              const SizedBox(height: 20),

              // ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÅ‡∏û‡πâ
              _buildTextField(
                controller: allergiesController,
                label: "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÅ‡∏û‡πâ",
                hint: "‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÅ‡∏û‡πâ ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ",
                icon: Icons.no_food_rounded,
                isOptional: true,
              ),

              const SizedBox(height: 20),

              // ‡πÇ‡∏£‡∏Ñ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß
              _buildTextField(
                controller: diseasesController,
                label: "‡πÇ‡∏£‡∏Ñ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß",
                hint: "‡∏£‡∏∞‡∏ö‡∏∏‡πÇ‡∏£‡∏Ñ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ",
                icon: Icons.medical_services_rounded,
                isOptional: true,
              ),

              const SizedBox(height: 20),

              // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß
              _buildTextField(
                controller: specialSkillsController,
                label: "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß",
                hint: "‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
                icon: Icons.star_rounded,
                maxLines: 3,
                validator:
                    (value) =>
                        value == null || value.isEmpty
                            ? "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß"
                            : null,
              ),

              const SizedBox(height: 20),

              // ‡πÄ‡∏Ñ‡∏¢‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡∏£‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
              _buildDropdownField(),

              const SizedBox(height: 32),

              // ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏°‡∏±‡∏Ñ‡∏£
              _buildSubmitButton(),
            ],
          ),
        ),
      ),
    );
  }

  // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á TextField ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
  Widget _buildTextField({
    required TextEditingController controller,
    required String label,
    required String hint,
    required IconData icon,
    TextInputType? keyboardType,
    int maxLines = 1,
    bool isOptional = false,
    String? Function(String?)? validator,
  }) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          children: [
            Icon(icon, color: AppTheme.primaryColor, size: 20),
            const SizedBox(width: 8),
            Text(
              label,
              style: const TextStyle(
                fontFamily: 'Kanit',
                fontSize: 16,
                fontWeight: FontWeight.w600,
                color: Color(0xFF2E7D32),
              ),
            ),
            if (isOptional)
              Container(
                margin: const EdgeInsets.only(left: 8),
                padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 2),
                decoration: BoxDecoration(
                  color: Colors.grey.shade200,
                  borderRadius: BorderRadius.circular(12),
                ),
                child: const Text(
                  '‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô',
                  style: TextStyle(
                    fontFamily: 'Sarabun',
                    fontSize: 11,
                    color: Colors.grey,
                    fontWeight: FontWeight.w500,
                  ),
                ),
              ),
          ],
        ),
        const SizedBox(height: 8),
        TextFormField(
          controller: controller,
          keyboardType: keyboardType,
          maxLines: maxLines,
          validator: validator,
          decoration: InputDecoration(
            hintText: hint,
            hintStyle: TextStyle(
              fontFamily: 'Sarabun',
              color: Colors.grey[400],
              fontSize: 14,
            ),
            filled: true,
            fillColor: AppTheme.surfaceColor,
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12),
              borderSide: BorderSide(color: AppTheme.borderColor, width: 1),
            ),
            enabledBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12),
              borderSide: BorderSide(color: AppTheme.borderColor, width: 1),
            ),
            focusedBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12),
              borderSide: const BorderSide(
                color: AppTheme.primaryColor,
                width: 2,
              ),
            ),
            errorBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12),
              borderSide: const BorderSide(color: Colors.red, width: 1),
            ),
            focusedErrorBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12),
              borderSide: const BorderSide(color: Colors.red, width: 2),
            ),
            contentPadding: const EdgeInsets.symmetric(
              horizontal: 16,
              vertical: 16,
            ),
          ),
          style: const TextStyle(
            fontFamily: 'Sarabun',
            fontSize: 16,
            color: Color(0xFF2E2E2E),
          ),
        ),
      ],
    );
  }

  // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Dropdown Field ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
  Widget _buildDropdownField() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          children: [
            const Icon(
              Icons.school_rounded,
              color: AppTheme.primaryColor,
              size: 20,
            ),
            const SizedBox(width: 8),
            const Text(
              '‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡∏£‡∏°',
              style: TextStyle(
                fontFamily: 'Kanit',
                fontSize: 16,
                fontWeight: FontWeight.w600,
                color: Color(0xFF2E7D32),
              ),
            ),
          ],
        ),
        const SizedBox(height: 8),
        DropdownButtonFormField<String>(
          value: hasTraining,
          items:
              trainingOptions
                  .map(
                    (e) => DropdownMenuItem(
                      value: e,
                      child: Text(
                        e,
                        style: const TextStyle(
                          fontFamily: 'Sarabun',
                          fontSize: 16,
                          color: Color(0xFF2E2E2E),
                        ),
                      ),
                    ),
                  )
                  .toList(),
          decoration: InputDecoration(
            hintText: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡∏£‡∏°",
            hintStyle: TextStyle(
              fontFamily: 'Sarabun',
              color: Colors.grey[400],
              fontSize: 14,
            ),
            filled: true,
            fillColor: AppTheme.surfaceColor,
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12),
              borderSide: BorderSide(color: AppTheme.borderColor, width: 1),
            ),
            enabledBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12),
              borderSide: BorderSide(color: AppTheme.borderColor, width: 1),
            ),
            focusedBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12),
              borderSide: const BorderSide(
                color: AppTheme.primaryColor,
                width: 2,
              ),
            ),
            contentPadding: const EdgeInsets.symmetric(
              horizontal: 16,
              vertical: 16,
            ),
          ),
          onChanged: (value) => setState(() => hasTraining = value!),
        ),
      ],
    );
  }
}

